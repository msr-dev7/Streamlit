# -*- coding: utf-8 -*-
"""Salvar Modelo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/138esTxadvQ-jm5iS14FeMHOW2knJkQ5p

#Lista de Exercícios
"""

import pandas as pd

"""## Instalação Pycaret"""

"""##1ª Questão - Seleção do conjunto de dados

**1. Escolha um conjunto de dados adequado para classificação binária. Certifique-se de que o conjunto de dados esteja bem balanceado ou considere técnicas de reamostragem se necessário.**

A base escolhida foi a 'heart_disease' com classificação binária na coluna 'Disease' indicando se o paciente possui doença cardíaca (1 para sim e 0 para não).

A base está praticamente balanceada, a classe 0 com 56% dos dados e a classe 1 com 44%.
"""

from pycaret.datasets import get_data
dados = get_data('heart_disease')

"""**Atributos:**

- Idade (**age**): A idade do paciente.
- Sexo (**sex**): O sexo do paciente (geralmente codificado como 0 para feminino e 1 para masculino).
- Tipo de dor no peito (**chest pain type**): O tipo de dor no peito relatado pelo
paciente, que pode ser uma variável categórica com valores diferentes representando diferentes tipos de dor.
- Pressão arterial em repouso (**resting blood pressure**): A pressão arterial sistólica em repouso do paciente (a pressão arterial quando o coração está em repouso).
- Colesterol sérico em mg/dL (**serum cholestoral in mg/dl**): O nível de colesterol sérico no sangue do paciente, medido em miligramas por decilitro (mg/dL).
- Açúcar no sangue em jejum > 120 mg/dL (**fasting blood sugar > 120 mg/dl**): Uma variável binária que indica se o paciente tem açúcar no sangue em jejum acima de 120 mg/dL (1 para sim e 0 para não).
- Resultados eletrocardiográficos em repouso (**resting electrocardiographic results**): Os resultados do eletrocardiograma em repouso do paciente, que podem incluir informações sobre a atividade elétrica do coração.
- Frequência cardíaca máxima atingida (**maximum heart rate achieved**): A frequência cardíaca máxima alcançada durante um teste de esforço.
- Angina induzida pelo exercício (**exercise induced angina**): Uma variável binária que indica se o paciente experimentou angina (dor no peito devido à falta de suprimento sanguíneo) induzida pelo exercício (1 para sim e 0 para não).
- Depressão do segmento ST induzida pelo exercício (**oldpeak**): A depressão do segmento ST no eletrocardiograma induzida pelo exercício, que pode ser um indicativo de problemas cardíacos.
- Inclinação do pico (**slope of peak**): A inclinação do segmento ST durante o pico do exercício.
- Número de vasos principais coloridos por fluoroscopia (**number of major vessels**): O número de principais vasos sanguíneos do coração coloridos por fluoroscopia, que pode ser usado como um indicativo de bloqueios nos vasos sanguíneos.
- Thalassemia (**thal**): Um tipo de anemia hereditária que afeta a produção de hemoglobina.
- Doença cardíaca (**Disease**): Uma variável binária que indica se o paciente possui doença cardíaca (1 para sim e 0 para não).
"""

dados.describe()

dados.columns

#Algumas colunas estão com espaço em branco no final do nome
dados.rename(columns=lambda x: x.strip(), inplace=True)

categorical_features = ['sex', 'chest pain type', 'exercise induced angina', 'fasting blood sugar > 120 mg/dl',
                        'slope of peak']

numeric_features = ['age','resting blood pressure',	'serum cholestoral in mg/dl',
                    'maximum heart rate achieved',	'oldpeak','resting electrocardiographic results',
                    'number of major vessels','thal']

from pycaret.classification import *

# Criando uma métrica personalizada no PyCaret
import numpy as np

def custo(y, y_pred):
    vp = np.where((y_pred==1) & (y==1), 1, 0) #previu doenca e era doenca -> custo = custo do tratamento e monitoramento
    fp = np.where((y_pred==1) & (y==0), 2, 0) #previu doenca e não era doenca -> custo = custo do tratamento (mas não era necessário, pode ter consequências que gere mais custo?)
    vn = np.where((y_pred==0) & (y==0), 0, 0) #não previu doenca e não era doenca = custo 0 (ou custo da prevenção)
    fn = np.where((y_pred==0) & (y==1), 5, 0) #não previu a doenca, mas estava doente = custo do tratamento tardio e indenização
    return np.sum([vp, fp, vn, fn])/len(y)

class_setup = setup(data = dados,
                    target = 'Disease',
                    numeric_features= ['age',
                                       'resting blood pressure',
                                      'serum cholestoral in mg/dl',
                                      'maximum heart rate achieved',
                                      'oldpeak',
                                      'resting electrocardiographic results',
                                      'number of major vessels',
                                      'thal'],
                    categorical_features = ['sex',
                                          'chest pain type',
                                          'fasting blood sugar > 120 mg/dl',
                                          'slope of peak'],
                    ignore_features=['exercise induced angina'],
                    train_size = 0.90,
                    n_jobs = -1,
                    session_id = 75)

add_metric('custo', 'Custo', custo, greater_is_better = False)

lr = create_model('lr')

lr_tunado = tune_model(lr, optimize='Custo')

modelo_final = finalize_model(lr_tunado)

save_model(modelo_final, 'modelo-previsao-heart-disease')